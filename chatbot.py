import os
import PyPDF2
import google.generativeai as genai
import re
import json

class CodeptitChatbot:
    def __init__(self):
        """Kh·ªüi t·∫°o chatbot"""
        self.pdf_content = ""
        self.video_data = []
        self.model = None
        self.chat_session = None
        self.api_key = "AIzaSyB-YIaPo7kJfxhDCcLPvCuaKPdD2BJeMLM" 
        self.pdf_file = "HDSD_GV_V1.pdf"
        self.video_file = "playlist_videos.json"
        
        self.generation_config = {"temperature": 0.7, "max_output_tokens": 2048}
        self.safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        ]

    def load_pdf_content(self) -> bool:
        """ƒê·ªçc n·ªôi dung t·ª´ file PDF"""
        try:
            if not os.path.exists(self.pdf_file):
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y {self.pdf_file}")
                return False
            
            with open(self.pdf_file, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                content_parts = []
                for page in pdf_reader.pages:
                    text = page.extract_text()
                    if text.strip():
                        content_parts.append(self._clean_pdf_text(text))
                self.pdf_content = "\n\n".join(content_parts)
                return bool(self.pdf_content.strip())
        except Exception as e:
            print(f"L·ªói ƒë·ªçc PDF: {e}")
            return False

    def load_video_data(self) -> bool:
        """ƒê·ªçc d·ªØ li·ªáu video t·ª´ file JSON"""
        try:
            if not os.path.exists(self.video_file):
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y {self.video_file}")
                return False
            
            with open(self.video_file, 'r', encoding='utf-8') as file:
                self.video_data = json.load(file)
                return True
        except Exception as e:
            print(f"L·ªói ƒë·ªçc file video: {e}")
            return False

    def get_video_list_for_gemini(self) -> str:
        """T·∫°o danh s√°ch video cho Gemini ƒë·ªÉ ch·ªçn"""
        if not self.video_data:
            return ""
        
        video_list = "DANH S√ÅCH VIDEO H∆Ø·ªöNG D·∫™N:\n"
        for i, video in enumerate(self.video_data, 1):
            video_list += f"{i}. **{video['title']}**: {video['description']} - Link: {video['link']}\n"
        
        return video_list

    def get_video_by_title(self, title: str) -> dict:
        """L·∫•y th√¥ng tin video d·ª±a tr√™n ti√™u ƒë·ªÅ"""
        for video in self.video_data:
            if video['title'] == title:
                return video
        return None

    def _clean_pdf_text(self, text: str) -> str:
        """L√†m s·∫°ch text t·ª´ PDF"""
        text = re.sub(r'\s+', ' ', text).strip()
        replacements = {'‚Äú': '"', '‚Äù': '"', '‚Äò': "'", '‚Äô': "'", '‚Äì': '-', '‚Äî': '-', '‚Ä¶': '...'}
        for old, new in replacements.items():
            text = text.replace(old, new)
        return text

    def setup_gemini_api(self) -> bool:
        """Thi·∫øt l·∫≠p k·∫øt n·ªëi Gemini API"""
        try:
            if not self.api_key:
                print("L·ªói: API key tr·ªëng.")
                return False
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel(
                model_name="gemini-2.5-pro",
                generation_config=self.generation_config,
                safety_settings=self.safety_settings,
                system_instruction=self._get_system_prompt()
            )
            self.chat_session = self.model.start_chat(history=[])
            return True
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi Gemini API: {e}")
            return False

    def _get_system_prompt(self) -> str:
        """T·∫°o system prompt"""
        video_list = self.get_video_list_for_gemini()
        return f"""
        B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ gi·∫£ng vi√™n s·ª≠ d·ª•ng Codeptit.
        Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ Codeptit d·ª±a tr√™n t√†i li·ªáu nh∆∞ng kh√¥ng c·∫ßn tr√≠ch d·∫´n h√¨nh ·∫£nh v√† m·ª•c l·ª•c:
        {self.pdf_content[:12000]}
        {video_list}
        H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng v√† ch√≠nh x√°c.
        
        H∆Ø·ªöNG D·∫™N QUAN TR·ªåNG:
        - Khi ƒë·ªÅ xu·∫•t video, PH·∫¢I s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng: üìπ **Video h∆∞·ªõng d·∫´n:** [T√™n video] - [M√¥ t·∫£] üîó [Link]
        - V√≠ d·ª•: üìπ **Video h∆∞·ªõng d·∫´n:** ƒêƒÉng nh·∫≠p - Truy c·∫≠p h·ªá th·ªëng b·∫±ng t√†i kho·∫£n gi·∫£ng vi√™n ƒë∆∞·ª£c c·∫•p üîó https://www.youtube.com/watch?v=Mu54mQnBbnY
        - Ch·ªâ ƒë∆∞a 1 video ph√π h·ª£p nh·∫•t v·ªõi c√¢u h·ªèi
        - N·∫øu kh√¥ng c√≥ video ph√π h·ª£p, kh√¥ng c·∫ßn ƒë∆∞a video v√†o
        - K·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c h·ªó tr·ª£
        """

    def chat(self, user_input: str) -> str:
        """X·ª≠ l√Ω tin nh·∫Øn v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi"""
        try:
            if not self.chat_session: return "L·ªói: Ch∆∞a k·∫øt n·ªëi Gemini."
            
            # L·∫•y ph·∫£n h·ªìi t·ª´ Gemini (Gemini s·∫Ω t·ª± ch·ªçn video ph√π h·ª£p)
            response = self.chat_session.send_message(user_input)
            bot_response = response.text.strip() if response.text else "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi."
            
            return bot_response
            
        except Exception as e:
            err = str(e).lower()
            if "quota" in err or "limit" in err: return "V∆∞·ª£t gi·ªõi h·∫°n API."
            if "api_key" in err: return "L·ªói API key."
            return f"L·ªói: {e}"

    def run(self):
        """Ch·∫°y chatbot"""
        print("--- CHATBOT CODEPTIT ---")
        if not self.load_pdf_content() or not self.load_video_data() or not self.setup_gemini_api():
            print("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông chatbot.")
            return
        
        print("Chatbot s·∫µn s√†ng! G√µ 'quit' ƒë·ªÉ tho√°t, 'help' ƒë·ªÉ g·ª£i √Ω.")
        while True:
            user_input = input("\nB·∫°n: ").strip()
            if user_input.lower() in ['quit', 'thoat', 'q']:
                print("T·∫°m bi·ªát!")
                break
            if user_input.lower() in ['help', 'h']:
                self._show_help()
                continue
            if not user_input:
                print("Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
                continue
            
            print(f"Tr·ª£ l√Ω: {self.chat(user_input)}")

    def _show_help(self):
        """Hi·ªÉn th·ªã g·ª£i √Ω"""
        print("\nG·ª£i √Ω: ƒêƒÉng nh·∫≠p? T·∫°o b√†i t·∫≠p? Th√™m sinh vi√™n? Ch·∫•m ƒëi·ªÉm? B√°o c√°o?")
        print("Chatbot s·∫Ω t·ª± ƒë·ªông g·ª£i √Ω video h∆∞·ªõng d·∫´n li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n!")

def main():
    """H√†m main"""
    CodeptitChatbot().run()

if __name__ == "__main__":
    main()
